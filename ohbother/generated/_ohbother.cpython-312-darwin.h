/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package ohbother/_generated */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 9 "ohbother.go"





// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void GoPyInit();

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//
extern void DecRef(long long handle);

// IncRef increments the reference count for the specified handle.
//
extern void IncRef(long long handle);

// NumHandles returns the number of handles currently in use.
//
extern GoInt NumHandles();

// --- wrapping slice: net.HardwareAddr ---
//
extern long long net_HardwareAddr_CTor();
extern GoInt net_HardwareAddr_len(long long handle);
extern char net_HardwareAddr_elem(long long handle, GoInt _idx);
extern long long net_HardwareAddr_subslice(long long handle, GoInt _st, GoInt _ed);
extern void net_HardwareAddr_set(long long handle, GoInt _idx, char _vl);
extern void net_HardwareAddr_append(long long handle, char _vl);

// --- wrapping slice: []bool ---
//
extern long long Slice_bool_CTor();
extern GoInt Slice_bool_len(long long handle);
extern char Slice_bool_elem(long long handle, GoInt _idx);
extern long long Slice_bool_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_bool_set(long long handle, GoInt _idx, char _vl);
extern void Slice_bool_append(long long handle, char _vl);

// --- wrapping slice: []byte ---
//
extern long long Slice_byte_CTor();
extern GoInt Slice_byte_len(long long handle);
extern char Slice_byte_elem(long long handle, GoInt _idx);
extern long long Slice_byte_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_byte_set(long long handle, GoInt _idx, char _vl);
extern void Slice_byte_append(long long handle, char _vl);
extern long long Slice_byte_from_bytes(PyObject* o);
extern PyObject* Slice_byte_to_bytes(long long handle);

// --- wrapping slice: []error ---
//
extern long long Slice_error_CTor();
extern GoInt Slice_error_len(long long handle);
extern char* Slice_error_elem(long long handle, GoInt _idx);
extern long long Slice_error_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_error_set(long long handle, GoInt _idx, char* _vl);
extern void Slice_error_append(long long handle, char* _vl);

// --- wrapping slice: []float32 ---
//
extern long long Slice_float32_CTor();
extern GoInt Slice_float32_len(long long handle);
extern float Slice_float32_elem(long long handle, GoInt _idx);
extern long long Slice_float32_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_float32_set(long long handle, GoInt _idx, float _vl);
extern void Slice_float32_append(long long handle, float _vl);

// --- wrapping slice: []float64 ---
//
extern long long Slice_float64_CTor();
extern GoInt Slice_float64_len(long long handle);
extern double Slice_float64_elem(long long handle, GoInt _idx);
extern long long Slice_float64_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_float64_set(long long handle, GoInt _idx, double _vl);
extern void Slice_float64_append(long long handle, double _vl);

// --- wrapping slice: []int ---
//
extern long long Slice_int_CTor();
extern GoInt Slice_int_len(long long handle);
extern long long Slice_int_elem(long long handle, GoInt _idx);
extern long long Slice_int_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_int_append(long long handle, long long _vl);

// --- wrapping slice: []int16 ---
//
extern long long Slice_int16_CTor();
extern GoInt Slice_int16_len(long long handle);
extern short Slice_int16_elem(long long handle, GoInt _idx);
extern long long Slice_int16_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int16_set(long long handle, GoInt _idx, short _vl);
extern void Slice_int16_append(long long handle, short _vl);

// --- wrapping slice: []int32 ---
//
extern long long Slice_int32_CTor();
extern GoInt Slice_int32_len(long long handle);
extern long Slice_int32_elem(long long handle, GoInt _idx);
extern long long Slice_int32_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int32_set(long long handle, GoInt _idx, long _vl);
extern void Slice_int32_append(long long handle, long _vl);

// --- wrapping slice: []int64 ---
//
extern long long Slice_int64_CTor();
extern GoInt Slice_int64_len(long long handle);
extern long long Slice_int64_elem(long long handle, GoInt _idx);
extern long long Slice_int64_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int64_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_int64_append(long long handle, long long _vl);

// --- wrapping slice: []int8 ---
//
extern long long Slice_int8_CTor();
extern GoInt Slice_int8_len(long long handle);
extern char Slice_int8_elem(long long handle, GoInt _idx);
extern long long Slice_int8_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int8_set(long long handle, GoInt _idx, char _vl);
extern void Slice_int8_append(long long handle, char _vl);

// --- wrapping slice: []rune ---
//
extern long long Slice_rune_CTor();
extern GoInt Slice_rune_len(long long handle);
extern long Slice_rune_elem(long long handle, GoInt _idx);
extern long long Slice_rune_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_rune_set(long long handle, GoInt _idx, long _vl);
extern void Slice_rune_append(long long handle, long _vl);

// --- wrapping slice: []string ---
//
extern long long Slice_string_CTor();
extern GoInt Slice_string_len(long long handle);
extern char* Slice_string_elem(long long handle, GoInt _idx);
extern long long Slice_string_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_string_set(long long handle, GoInt _idx, char* _vl);
extern void Slice_string_append(long long handle, char* _vl);

// --- wrapping slice: []uint ---
//
extern long long Slice_uint_CTor();
extern GoInt Slice_uint_len(long long handle);
extern unsigned long long Slice_uint_elem(long long handle, GoInt _idx);
extern long long Slice_uint_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint_set(long long handle, GoInt _idx, unsigned long long _vl);
extern void Slice_uint_append(long long handle, unsigned long long _vl);

// --- wrapping slice: []uint16 ---
//
extern long long Slice_uint16_CTor();
extern GoInt Slice_uint16_len(long long handle);
extern unsigned short Slice_uint16_elem(long long handle, GoInt _idx);
extern long long Slice_uint16_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint16_set(long long handle, GoInt _idx, unsigned short _vl);
extern void Slice_uint16_append(long long handle, unsigned short _vl);

// --- wrapping slice: []uint32 ---
//
extern long long Slice_uint32_CTor();
extern GoInt Slice_uint32_len(long long handle);
extern unsigned long Slice_uint32_elem(long long handle, GoInt _idx);
extern long long Slice_uint32_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint32_set(long long handle, GoInt _idx, unsigned long _vl);
extern void Slice_uint32_append(long long handle, unsigned long _vl);

// --- wrapping slice: []uint64 ---
//
extern long long Slice_uint64_CTor();
extern GoInt Slice_uint64_len(long long handle);
extern unsigned long long Slice_uint64_elem(long long handle, GoInt _idx);
extern long long Slice_uint64_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint64_set(long long handle, GoInt _idx, unsigned long long _vl);
extern void Slice_uint64_append(long long handle, unsigned long long _vl);

// --- wrapping slice: []uint8 ---
//
extern long long Slice_uint8_CTor();
extern GoInt Slice_uint8_len(long long handle);
extern unsigned char Slice_uint8_elem(long long handle, GoInt _idx);
extern long long Slice_uint8_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint8_set(long long handle, GoInt _idx, unsigned char _vl);
extern void Slice_uint8_append(long long handle, unsigned char _vl);

// --- wrapping slice: [][]byte ---
//
extern long long Slice_Slice_byte_CTor();
extern GoInt Slice_Slice_byte_len(long long handle);
extern long long Slice_Slice_byte_elem(long long handle, GoInt _idx);
extern long long Slice_Slice_byte_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_Slice_byte_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_Slice_byte_append(long long handle, long long _vl);

// --- wrapping slice: []interface{} ---
//
extern long long Slice_interface__CTor();
extern GoInt Slice_interface__len(long long handle);
extern char* Slice_interface__elem(long long handle, GoInt _idx);
extern long long Slice_interface__subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_interface__set(long long handle, GoInt _idx, char* _vl);
extern void Slice_interface__append(long long handle, char* _vl);

// --- wrapping map: map[string]uint64 ---
//
extern long long Map_string_uint64_CTor();
extern GoInt Map_string_uint64_len(long long handle);
extern unsigned long long Map_string_uint64_elem(long long handle, char* _ky);
extern char Map_string_uint64_contains(long long handle, char* _ky);
extern void Map_string_uint64_set(long long handle, char* _ky, unsigned long long _vl);
extern void Map_string_uint64_delete(long long handle, char* _ky);
extern long long Map_string_uint64_keys(long long handle);
extern void ohbother_Logger_Debug(long long _handle, char* format, long long args, char goRun);
extern void ohbother_Logger_Error(long long _handle, char* format, long long args, char goRun);
extern void ohbother_Logger_Info(long long _handle, char* format, long long args, char goRun);
extern void ohbother_Logger_Warn(long long _handle, char* format, long long args, char goRun);

// --- wrapping struct: ohbother.ContinuousPacketReceiver ---
//
extern long long ohbother_ContinuousPacketReceiver_CTor();
extern long long ohbother_ContinuousPacketReceiver_GetNextPacket(long long _handle);
extern void ohbother_ContinuousPacketReceiver_Close(long long _handle, char goRun);

// --- wrapping struct: ohbother.MultiStreamSender ---
//
extern long long ohbother_MultiStreamSender_CTor();
extern long long ohbother_MultiStreamSender_Cfg_Get(long long handle);
extern void ohbother_MultiStreamSender_Cfg_Set(long long handle, long long val);
extern long long ohbother_MultiStreamSender_StreamConfig_Get(long long handle);
extern void ohbother_MultiStreamSender_StreamConfig_Set(long long handle, long long val);
extern long long ohbother_MultiStreamSender_RateLimit_Get(long long handle);
extern void ohbother_MultiStreamSender_RateLimit_Set(long long handle, long long val);
extern long long ohbother_MultiStreamSender_Payloads_Get(long long handle);
extern void ohbother_MultiStreamSender_Payloads_Set(long long handle, long long val);
extern void ohbother_MultiStreamSender_SetStreamConfig(long long _handle, long long packetWorkers, long long streamCount, long long channelBuffers, long long reportInterval, char goRun);
extern void ohbother_MultiStreamSender_SetAdvancedConfig(long long _handle, char enableCPUPinning, char disableOrdering, long long turnstileBurst, char enableMetrics, char goRun);
extern void ohbother_MultiStreamSender_AddPayload(long long _handle, long long payload, char goRun);
extern char* ohbother_MultiStreamSender_Send(long long _handle);
extern long long ohbother_MultiStreamSender_GetMetrics(long long _handle);
extern char ohbother_MultiStreamSender_IsComplete(long long _handle);
extern long long ohbother_MultiStreamSender_GetNextResult(long long _handle);
extern void ohbother_MultiStreamSender_Wait(long long _handle, char goRun);
extern long long ohbother_MultiStreamSender_GetSentCount(long long _handle);
extern long long ohbother_MultiStreamSender_GetErrorCount(long long _handle);
extern long long ohbother_MultiStreamSender_GetStreamConfig(long long _handle);
extern char ohbother_MultiStreamSender_IsOrderingEnabled(long long _handle);
extern char ohbother_MultiStreamSender_IsCPUPinningEnabled(long long _handle);
extern long long ohbother_MultiStreamSender_GetTurnstileBurst(long long _handle);
extern char ohbother_MultiStreamSender_AreMetricsEnabled(long long _handle);
extern long long ohbother_MultiStreamSender_FastConvertPayloads(long long _handle, long long payloads);

// --- wrapping struct: ohbother.PacketReceiver ---
//
extern long long ohbother_PacketReceiver_CTor();
extern long long ohbother_PacketReceiver_Result(long long _handle);
extern long long ohbother_PacketReceiver_ResultNative(long long _handle);

// --- wrapping struct: ohbother.PcapConfig ---
//
extern long long ohbother_PcapConfig_CTor();
extern char* ohbother_PcapConfig_Iface_Get(long long handle);
extern void ohbother_PcapConfig_Iface_Set(long long handle, char* val);
extern long ohbother_PcapConfig_SnapLen_Get(long long handle);
extern void ohbother_PcapConfig_SnapLen_Set(long long handle, long val);
extern char ohbother_PcapConfig_Promisc_Get(long long handle);
extern void ohbother_PcapConfig_Promisc_Set(long long handle, char val);
extern long long ohbother_PcapConfig_Timeout_Get(long long handle);
extern void ohbother_PcapConfig_Timeout_Set(long long handle, long long val);
extern long long ohbother_PcapConfig_BufferSize_Get(long long handle);
extern void ohbother_PcapConfig_BufferSize_Set(long long handle, long long val);
extern char ohbother_PcapConfig_ImmediateMode_Get(long long handle);
extern void ohbother_PcapConfig_ImmediateMode_Set(long long handle, char val);

// --- wrapping struct: ohbother.DebugOptions ---
//
extern long long ohbother_DebugOptions_CTor();
extern char ohbother_DebugOptions_Enabled_Get(long long handle);
extern void ohbother_DebugOptions_Enabled_Set(long long handle, char val);
extern long long ohbother_DebugOptions_Level_Get(long long handle);
extern void ohbother_DebugOptions_Level_Set(long long handle, long long val);
extern long long ohbother_DebugOptions_Logger_Get(long long handle);
extern void ohbother_DebugOptions_Logger_Set(long long handle, long long val);

// --- wrapping struct: ohbother.DefaultLogger ---
//
extern long long ohbother_DefaultLogger_CTor();
extern void ohbother_DefaultLogger_Debug(long long _handle, char* format, long long args, char goRun);
extern void ohbother_DefaultLogger_Info(long long _handle, char* format, long long args, char goRun);
extern void ohbother_DefaultLogger_Warn(long long _handle, char* format, long long args, char goRun);
extern void ohbother_DefaultLogger_Error(long long _handle, char* format, long long args, char goRun);

// --- wrapping struct: ohbother.MultiStreamConfig ---
//
extern long long ohbother_MultiStreamConfig_CTor();
extern long long ohbother_MultiStreamConfig_PacketWorkers_Get(long long handle);
extern void ohbother_MultiStreamConfig_PacketWorkers_Set(long long handle, long long val);
extern long long ohbother_MultiStreamConfig_StreamCount_Get(long long handle);
extern void ohbother_MultiStreamConfig_StreamCount_Set(long long handle, long long val);
extern long long ohbother_MultiStreamConfig_ChannelBuffers_Get(long long handle);
extern void ohbother_MultiStreamConfig_ChannelBuffers_Set(long long handle, long long val);
extern long long ohbother_MultiStreamConfig_ReportInterval_Get(long long handle);
extern void ohbother_MultiStreamConfig_ReportInterval_Set(long long handle, long long val);
extern char ohbother_MultiStreamConfig_EnableCPUPinning_Get(long long handle);
extern void ohbother_MultiStreamConfig_EnableCPUPinning_Set(long long handle, char val);
extern char ohbother_MultiStreamConfig_DisableOrdering_Get(long long handle);
extern void ohbother_MultiStreamConfig_DisableOrdering_Set(long long handle, char val);
extern long long ohbother_MultiStreamConfig_TurnstileBurst_Get(long long handle);
extern void ohbother_MultiStreamConfig_TurnstileBurst_Set(long long handle, long long val);
extern char ohbother_MultiStreamConfig_EnableMetrics_Get(long long handle);
extern void ohbother_MultiStreamConfig_EnableMetrics_Set(long long handle, char val);

// --- wrapping struct: ohbother.PacketConfig ---
//
extern long long ohbother_PacketConfig_CTor();
extern long long ohbother_PacketConfig_SrcMAC_Get(long long handle);
extern void ohbother_PacketConfig_SrcMAC_Set(long long handle, long long val);
extern long long ohbother_PacketConfig_DstMAC_Get(long long handle);
extern void ohbother_PacketConfig_DstMAC_Set(long long handle, long long val);
extern char* ohbother_PacketConfig_SrcIP_Get(long long handle);
extern void ohbother_PacketConfig_SrcIP_Set(long long handle, char* val);
extern char* ohbother_PacketConfig_DstIP_Get(long long handle);
extern void ohbother_PacketConfig_DstIP_Set(long long handle, char* val);
extern long long ohbother_PacketConfig_SrcPort_Get(long long handle);
extern void ohbother_PacketConfig_SrcPort_Set(long long handle, long long val);
extern long long ohbother_PacketConfig_DstPort_Get(long long handle);
extern void ohbother_PacketConfig_DstPort_Set(long long handle, long long val);
extern char* ohbother_PacketConfig_BPF_Get(long long handle);
extern void ohbother_PacketConfig_BPF_Set(long long handle, char* val);

// --- wrapping struct: ohbother.PacketSendResult ---
//
extern long long ohbother_PacketSendResult_CTor();
extern long long ohbother_PacketSendResult_Index_Get(long long handle);
extern void ohbother_PacketSendResult_Index_Set(long long handle, long long val);
extern long long ohbother_PacketSendResult_TotalCount_Get(long long handle);
extern void ohbother_PacketSendResult_TotalCount_Set(long long handle, long long val);
extern double ohbother_PacketSendResult_Elapsed_Get(long long handle);
extern void ohbother_PacketSendResult_Elapsed_Set(long long handle, double val);
extern char* ohbother_PacketSendResult_GetError(long long _handle);

// --- wrapping struct: ohbother.PacketSequenceSender ---
//
extern long long ohbother_PacketSequenceSender_CTor();
extern long long ohbother_PacketSequenceSender_Cfg_Get(long long handle);
extern void ohbother_PacketSequenceSender_Cfg_Set(long long handle, long long val);
extern long long ohbother_PacketSequenceSender_RateLimit_Get(long long handle);
extern void ohbother_PacketSequenceSender_RateLimit_Set(long long handle, long long val);
extern long long ohbother_PacketSequenceSender_Payloads_Get(long long handle);
extern void ohbother_PacketSequenceSender_Payloads_Set(long long handle, long long val);
extern void ohbother_PacketSequenceSender_AddPayload(long long _handle, long long payload, char goRun);
extern char* ohbother_PacketSequenceSender_Send(long long _handle);
extern long long ohbother_PacketSequenceSender_GetNextResult(long long _handle);
extern char ohbother_PacketSequenceSender_IsComplete(long long _handle);

// --- wrapping struct: ohbother.AsyncResult ---
//
extern long long ohbother_AsyncResult_CTor();
extern long long ohbother_AsyncResult_Packets_Get(long long handle);
extern void ohbother_AsyncResult_Packets_Set(long long handle, long long val);
extern long long ohbother_AsyncResult_GetPackets(long long _handle);
extern char* ohbother_AsyncResult_GetErr(long long _handle);

// --- wrapping struct: ohbother.BytePacket ---
//
extern long long ohbother_BytePacket_CTor();
extern long long ohbother_BytePacket_Data_Get(long long handle);
extern void ohbother_BytePacket_Data_Set(long long handle, long long val);
extern long long ohbother_BytePacket_GetData(long long _handle);

// --- wrapping struct: ohbother.Config ---
//
extern long long ohbother_Config_CTor();
extern long long ohbother_Config_Pcap_Get(long long handle);
extern void ohbother_Config_Pcap_Set(long long handle, long long val);
extern long long ohbother_Config_Packet_Get(long long handle);
extern void ohbother_Config_Packet_Set(long long handle, long long val);
extern long long ohbother_Config_Debug_Get(long long handle);
extern void ohbother_Config_Debug_Set(long long handle, long long val);
extern void ohbother_Config_EnableDebug(long long _handle, long long level, char goRun);
extern void ohbother_Config_DisableDebug(long long _handle, char goRun);
extern void ohbother_Config_SetLogger(long long _handle, long long logger, char goRun);
extern long long ohbother_NewReceiver(long long cfg);
extern long long ohbother_NewMultiStreamSender(long long cfg, long long rateLimit);
extern long long ohbother_PacketReceiverByCount(long long cfg, long long count, double timeout);
extern long long ohbother_PacketReceiverByTime(long long cfg, double duration);
extern long long ohbother_BenchmarkReceiveAsync(long long cfg, double duration);
extern long long ohbother_NewDefaultLogger(long long cfg);
extern long long ohbother_NewPacketSequenceSender(long long cfg, long long rateLimit);
extern long long ohbother_NewBytePacket(long long data);
extern long long ohbother_NewDefaultConfig(char* iface, char* srcMAC, char* dstMAC, char* srcIP, char* dstIP, long long srcPort, long long dstPort, char* bpf, long long SnapLen, char Promisc, long long BufferSize, char ImmediateMode);
extern void ohbother_DeleteSliceBytes(long long handle, char goRun);
extern void ohbother_LogDebug(char* format, long long args, char goRun);
extern void ohbother_LogError(char* format, long long args, char goRun);
extern void ohbother_LogWarn(char* format, long long args, char goRun);
extern double ohbother_BenchmarkSend(long long cfg, long long packetCount, long long payloadSize, long long rateLimit);
extern long long ohbother_PayloadNative(char* pyPayload);
extern long long ohbother_ReceivePacketsByCountSync(long long cfg, long long count, double timeout);
extern char* ohbother_SendByteArrays(long long cfg, long long bytePayloads, long long rateLimit);
extern char* ohbother_SendPacket(long long cfg, long long payload, long long rateLimit);
extern void ohbother_LogInfo(char* format, long long args, char goRun);
extern long long ohbother_NewSliceByteFromBytes(long long data);
extern long long ohbother_ReceivePacketsByTimeSync(long long cfg, double duration);
extern char* ohbother_SendPackets(long long cfg, char* rawPayloads, long long rateLimit);
extern long long ohbother_BatchConvertPythonBytesToSlices(long long rawBytes, long long numWorkers);

#ifdef __cplusplus
}
#endif
