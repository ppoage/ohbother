name: Build Library

on:
  push:
    branches: [ main, dev/wip/new_linkages ]
    paths:
      - 'ohbother/core/**'
      - 'build.py'
      - '.github/workflows/build.yml'
  pull_request:
    branches: [ main, dev/wip/new_linkages ]
    paths:
      - 'ohbother/core/**'
      - 'build.py'
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('ohbother/ohbother/core/go.sum') }}-${{ hashFiles('ohbother/ohbother/core/**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      # Cache Poetry virtual environment (in-project .venv)
      - name: Cache Poetry virtual environment
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'

      - name: Set Python command based on OS
        id: set-python-cmd
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            echo "python_cmd=py" >> $GITHUB_OUTPUT
          else
            echo "python_cmd=python" >> $GITHUB_OUTPUT
          fi

      - name: Ensure python3.exe exists for Windows
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          echo "Checking for python3.exe..."
          if exist "%pythonLocation%\python3.exe" (
            echo "python3.exe already exists"
          ) else (
            echo "Creating python3.exe symlink..."
            mklink "%pythonLocation%\python3.exe" "%pythonLocation%\python.exe"
          if exist "%pythonLocation%\python3.exe" (
            echo "python3.exe symlink created successfully"
          ) else (
            echo "Failed to create python3.exe symlink"
            exit 1
          )
          )

      - name: Install Go tools
        run: |
          go install github.com/go-python/gopy@latest
          go install golang.org/x/tools/cmd/goimports@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      # Use Makefile for common environment setup (creates .env, installs Poetry and dependencies)
      - name: Initialize Environment via Makefile
        run: make init

      - name: Set LD_LIBRARY_PATH for Linux
        if: runner.os == 'Linux'
        run: echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:." >> $GITHUB_ENV

      # Build the library (gopy build)
      - name: Build library
        run: poetry run build.py
        env:
          LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}:.
          GOPY_LIBDIR: ${{ runner.os == 'Windows' && format('{0}/libs', env.pythonLocation) || '' }}
          GOPY_PYLIB: ${{ runner.os == 'Windows' && (matrix.python-version == '3.10' && 'python310' || matrix.python-version == '3.11' && 'python311' || matrix.python-version == '3.12' && 'python312' || matrix.python-version == '3.13' && 'python313') || '' }}
          PYTHON_VM_PATH: ${{ runner.os == 'Windows' && format('{0}/python3.exe', env.pythonLocation) || format('{0}/bin/python', env.pythonLocation) }}

      - name: Upload compiled library
        uses: actions/upload-artifact@v4
        with:
          name: lib-${{ matrix.os }}-py${{ matrix.python-version }}
          path: ohbother/generated/**/*

      # Build the Poetry wheel using the custom flag
      - name: Build Poetry Wheel
        run: ${{ steps.set-python-cmd.outputs.python_cmd }} build.py --poetry
        continue-on-error: true

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*.whl