name: Build Wheels

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      build_workflow_run_id:
        description: 'Build workflow run ID to use artifacts from'
        required: false
        default: 'latest'
      python_version:
        description: 'Python version to build for (3.10, 3.11, 3.12)'
        required: true
        default: '3.12'
        type: choice
        options:
          - '3.10'
          - '3.11'
          - '3.12'
      platform:
        description: 'Platform to build for'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'windows'
          - 'macos'
  # Automatic trigger
  workflow_run:
    workflows: ["Build Library"]
    types:
      - completed
    branches: [ main, dev/wip/new_linkages ]


jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure complete checkout of all files

      - name: Debug - List entire repository structure
        run: |
          echo "Repository structure (recursive):"
          find . -type f | sort
        shell: bash

      - name: Verify workspace root and ohbother/
        run: |
          echo "Current directory: $(pwd)"
          echo "Files at repository root (non-recursive):"
          find . -maxdepth 1 -type f | sort
          echo "Python packaging files (setup.py, pyproject.toml, setup.cfg):"
          find . -maxdepth 1 -name "setup.py" -o -name "pyproject.toml" -o -name "setup.cfg"
          echo "Files in ohbother/ directory (non-recursive):"
          find ./ohbother -maxdepth 1 -type f | sort
        shell: bash

      # Handle different ways to determine the build workflow run ID
      - name: Determine build workflow run ID
        id: determine-run-id
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.build_workflow_run_id }}" != "" ]]; then
            echo "run_id=${{ github.event.inputs.build_workflow_run_id }}" >> $GITHUB_OUTPUT
          else
            echo "run_id=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      # Download artifacts from the build workflow
      - name: Download library artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build.yml
          run_id: ${{ steps.determine-run-id.outputs.run_id }}
          name: lib-${{ matrix.os }}-py${{ matrix.python-version }}
          path: ohbother/generated/
          skip_unpack: false  # Make sure we extract the files
          if_no_artifact_found: error
      
      # Verify artifacts were downloaded properly
      - name: Debug - Recursively list downloaded artifacts
        run: |
          echo "Recursive listing of ohbother/generated:"
          find ohbother/generated -type f | sort
          echo "Number of files in generated directory:"
          find ohbother/generated -type f | wc -l
          echo "File types in generated directory:"
          find ohbother/generated -type f -name "*.so" -o -name "*.dll" -o -name "*.dylib" -o -name "*.py" | sort
          echo "Absolute path of generated dir: $(pwd)/ohbother/generated"
        shell: bash

      # Enhanced deep inspection of downloaded artifacts
      - name: Deep inspection of downloaded artifacts
        run: |
          # Create directories first if they don't exist
          mkdir -p ohbother/generated
          
          echo "PROPER FOUND - Complete directory structure search:"
          
          # Check for all files recursively within ohbother/generated (including subdirectories)
          echo "PROPER FOUND - All files in ohbother/generated (recursive):"
          find ohbother/generated -type f | sort | while read file; do
            echo "PROPER FOUND - FILE: $file"
          done
          
          # Specifically check for binary extensions and Python files
          echo "PROPER FOUND - Binary extensions and Python files (recursive search):"
          find ohbother/generated -type f \( -name "*.so" -o -name "*.dll" -o -name "*.pyd" -o -name "*.dylib" -o -name "*.py" \) | sort | while read file; do
            echo "PROPER FOUND - EXTENSION: $file"
          done
          
          # Make sure we're doing a proper recursive search
          echo "PROPER FOUND - Number of files found with recursive search:"
          find ohbother/generated -type f | wc -l
          
          # Search all subdirectories explicitly
          echo "PROPER FOUND - All subdirectories under generated:"
          find ohbother/generated -type d | sort | while read dir; do
            echo "PROPER FOUND - DIR: $dir"
            ls -la "$dir" || echo "Empty directory"
          done
          
          echo "PROPER FOUND - Absolute path: $(pwd)/ohbother/generated"
        shell: bash
      
      # Create a setup.py.local with explicit ext_modules if necessary
      - name: Ensure extension modules are recognized
        run: |
          # Create a file listing all binary extension files to help debug
          echo "Finding all potential extension modules:"
          find ohbother/generated -name "*.so" -o -name "*.dll" -o -name "*.pyd" -o -name "*.dylib" > extension_files.txt
          cat extension_files.txt
        shell: bash

      # Set up Python for cibuildwheel
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'  # Use one consistent version for running cibuildwheel

      # Install cibuildwheel
      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel==2.23.0

      # Try running cibuildwheel with working dir explicitly in repository root
      - name: Build wheels
        run: |
          echo "Current working directory: $(pwd)"
          echo "Full recursive listing of repository before build:"
          find . -type f -name "*.so" -o -name "*.dll" -o -name "*.dylib" -o -name "*.py" | sort
          
          # Force the creation of a binary wheel by using the right options
          python -m cibuildwheel --output-dir wheelhouse
        env:
          # Only build for the python version we have artifacts for
          CIBW_BUILD: cp${{ matrix.python-version == '3.10' && '310' || matrix.python-version == '3.11' && '311' || '312' }}*
          # Skip building wheels without matching architecture
          CIBW_SKIP: "*-musllinux_* *-manylinux_i686 *-win32"
          # Skip tests for now
          CIBW_TEST_SKIP: "*"
          # Define what gets included in the wheel
          CIBW_BEFORE_BUILD: "pip install setuptools wheel"
          # Set platform-specific build flags with absolute paths
          CIBW_ENVIRONMENT_LINUX: "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(pwd)/ohbother/generated"
          CIBW_ENVIRONMENT_MACOS: "DYLD_LIBRARY_PATH=${DYLD_LIBRARY_PATH}:$(pwd)/ohbother/generated MACOSX_DEPLOYMENT_TARGET=14.0"
          CIBW_ENVIRONMENT_WINDOWS: "PATH=${PATH};$(pwd)/ohbother/generated"
          # For macOS arm64 wheels
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_BUILD_VERBOSITY: "1"
          # Ensure MANIFEST.in is considered
          PIP_NO_BUILD_ISOLATION: "false"

      # Upload the wheels as artifacts
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-py${{ matrix.python-version }}
          path: wheelhouse/*.whl
